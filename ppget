#!/bin/bash

set -o pipefail

APIURL="http://pirateplay.se/api/get_streams.js?url="

usage() {
	echo "Usage: $1 <url> <filename> [<quality>]"
	echo "       $1 -l <url>"
	echo
	echo "    -l          list available qualities"
	echo "    <quality>   best (default), worst or one of the available (use -l to list)"
	echo
	exit 1
}

yesno() {
	local a=""

	stty raw
	echo -n "$1 (Y/n) "
	read -n 1 a
	stty -raw
	echo

	if [ "$a" = y ] || [ "$a" = Y ] || [ "$a" = "$(printf '\n')" ]; then
		return 0
	fi

	return 1
}

pirateplay() {
	curl -Ss "$APIURL$1" || exit 1
}

selquality() {
	# XXX: I'm assuming  higher number is better quality
	awk -v "quality=$1" '
		quality == "best" {
			SEL=$0;
			exit;
		}
		quality == "worst" {
			SEL=$0;
		}
		quality == $1 {
			SEL=$0;
			exit;
		}
		END {
			print SEL;
		}
	'
}

getsub() {
	local suburl="$1"
	local filename="$2"

	echo Saving subtitles to $filename
	curl -Ss -o "$filename" "$suburl"

	# if it's wsrt, convert some stuff
	if [ "${suburl: -4}" = "wsrt" ]; then
		sed -i -r -e 's/<([/]?)3[23]>/<\1i>/g' -e 's/<[/]?[0-9]+>//g' "$filename"
	fi
}

download_http() {
	local url="$1"
	local filename="$2"

	# Turn off colors in ffmpeg
	export AV_LOG_FORCE_NOCOLOR=1

	ffmpeg -y -i "$url" -acodec copy -vcodec copy -absf aac_adtstoasc "$filename" 2>&1 | awk '
	BEGIN {
		RS="[\r\n]";
	}
	function strtosec(str,  a,sec) {
		split(str, a, ":"); 
		sec = a[3];
		sec += a[2] * 60;
		sec += a[1] * 60 * 60;

		return sec;
	}
	/time=[0-9][0-9]/ {
		if(match($0, /time=[0-9:.]*/) != 0) {
			printf("\r%.2f%%     ", strtosec(substr($0, RSTART+5, RLENGTH-5))/TOTAL*100);
		}
		next;
	}
	/Duration: / {
		sub(",", "", $2);
		TOTAL = strtosec($2);
	}
	'

	if [ $? -eq 0 ]; then
		printf "\r100%%     "
	else
		echo
		echo "ffmpeg failed"
		exit 1
	fi

	echo
}

download_rtmp() {
	local url="$1"
	local filename="$2"

	echo $url

	# extract real url and args to rtmpdump
	local u=$(echo "$url" | cut '-d ' -f1)
	local args=${url:${#u}}
	args=$(echo $args | awk '
		BEGIN {RS=" "; FS="=";}
		{printf("--%s %s\n", $1, $2);}')

	rtmpdump -o "$filename" -r "$u" $args 2>&1 | awk '
	BEGIN {
		RS="[\r\n]";
	}
	/^ERROR/{print; next;}
	/\([0-9.]+%\)/ {
		if(match($0, /\([0-9.]+%\)/) != 0) {
			printf("\r%s     ", substr($0, RSTART+1, RLENGTH-2));
		}
	}
	'

	if [ $? -eq 0 ]; then
		printf "\r100%%     "
	else
		echo
		echo "rtmpdump failed"
		exit 1
	fi
}

if [ "$1" = "-l" ]; then
	list=1
	url="$2"
elif [ $# -eq 2 ] || [ $# -eq 3 ]; then
	url="$1"
	filename="$2"
	quality=${3:-best}
else
	usage $(basename $0)
fi

if [ "$list" ]; then
	pirateplay "$url" | jshon -C -a -e meta -e quality -u -p -e suffixHint -u | \
		sed -e 's/null/-/' -e 's/ kbps//' | paste -s -d '\t\n' | \
		sort -r -n | column -t
	exit
fi

echo Downloading to $filename
test -f "$filename" && { yesno "$filename exist. Overwrite it?" || exit 1; }

sel="$(pirateplay "$url" | \
	jshon -C -a -e meta -e quality -u -p -p -e url -u -p -e meta -e subtitles -u | \
	sed 's/ kbps//' | paste -s -d '\t\t\n' | sort -r -n | \
	selquality $quality)"

if [ ! "$sel" ]; then
	echo "Quality '$quality' is not available"
	exit 1
fi
selqual=$(echo "$sel" | cut -f1)
selurl=$(echo "$sel" | cut -f2)
selsub=$(echo "$sel" | cut -f3)

echo "Selecting quality $selqual"

proto="$(echo "$selurl" | cut -d: -f1)"
case "$proto" in
	http | https)
		proto=http
		;;
	rtmp | rtmpt[se] | rtmp[tes])
		proto=rtmp
		;;
	*)
		echo Protocol not supported: $proto
		exit 1
		;;
esac

# we assume it's in srt format (but do some conversions in getsub).
if [ ! "$selsub" = "null" ]; then
	subfilename="$(echo "$filename" | sed 's/\.[^.]\+$//').srt"
	test -f "$subfilename" && { yesno "$subfilename exist. Overwrite it?" || exit 1; }
	getsub "$selsub" "$subfilename"
fi

download_$proto "$selurl" "$filename"

exit

